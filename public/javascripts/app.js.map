{"version":3,"sources":["app/scripts/album.js","app/scripts/app.js","app/scripts/collection.js","app/scripts/landing.js","app/scripts/profile.js"],"names":[],"mappingszjEA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA","file":"public/javascripts/app.js","sourcesContent":["\r\n// Example Album\r\nvar albumPicasso = {\r\n    name: 'The Colors',\r\n    artist: 'Pablo Picasso',\r\n    label: 'Cubism',\r\n    year: '1881',\r\n    albumArtUrl: '/images/album-placeholder.png',\r\n    songs: [\r\n        { name: 'Blue', length: '4:26'},\r\n        { name: 'Green', length: '3:14'},\r\n        { name: 'Red', length: '5:01'},\r\n        { name: 'Pink', length: '3:21'},\r\n        { name: 'Magenta', length: '2:15'}\r\n    ]\r\n};\r\n\r\n// Another Album Example\r\nvar albumMarconi = {\r\n    name: 'The Telephone',\r\n    artist: 'Gulielmo Marconi',\r\n    label: 'EM',\r\n    year: '1909',\r\n    albumArtUrl: 'images/album-placeholder.png',\r\n    songs: [\r\n        { name: 'Hello, Operator?', length: '1:01'},\r\n        { name: 'Ring, Ring, Ring', length: '5:01'},\r\n        { name: 'Fits in your pocket', length: '3:21'},\r\n        { name: 'Can you hear me now?', length: '3:14'},\r\n        { name: 'Wrong phone number', length: '2:15'}\r\n    ]\r\n};\r\n\r\nvar currentlyPlayingSong = null;\r\n\r\nvar createSongRow = function (songNumber, songName, songLength) {\r\n    var template =\r\n        '<tr>'\r\n        +   '   <td class=\"song-number col-md-1\" data-song-number=\"' + songNumber + '\">' + songNumber + '</td>'\r\n        +   '   <td class=\"col-md-9\">' + songName + '</td>'\r\n        +   '   <td class=\"col-md-2\">' + songLength + '</td>'\r\n        +   '</tr>';\r\n\r\n    // Instead of returning the row immediately, we'll attach hover\r\n    // functionality to it first.\r\n    var $row = $(template);\r\n\r\n    var onHover = function(event) {\r\n        songNumberCell = $(this).find('.song-number');\r\n        songNumber = songNumberCell.data('song-number');\r\n        if (songNumber !== currentlyPlayingSong) {\r\n            songNumberCell.html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\r\n        }\r\n    };\r\n\r\n    var offHover = function(event) {\r\n        songNumberCell = $(this).find('.song-number');\r\n        songNumber = songNumberCell.data('song-number');\r\n        if (songNumber !== currentlyPlayingSong) {\r\n            songNumberCell.html(songNumber);\r\n        }\r\n    };\r\n\r\n    // Toggle the play, pause, and song number based on the button clicked.\r\n    var clickHandler = function(event) {\r\n        songNumber = $(this).data('song-number');\r\n\r\n        if (currentlyPlayingSong !== null) {\r\n            // Revert to song number for currently playing song because user started playing new song.\r\n            currentlyPlayingSongCell = $('.song-number[data-song-number=\"' + currentlyPlayingSong + '\"]');\r\n            currentlyPlayingSongCell.html(currentlyPlayingSong);\r\n        }\r\n\r\n        if (currentlyPlayingSong !== songNumber) {\r\n            // Switch from Play -> Pause button to indicate new song is playing.\r\n            $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-pause\"></i></a>');\r\n            currentlyPlayingSong = songNumber;\r\n        }\r\n        else if (currentlyPlayingSong === songNumber) {\r\n            // Switch from Pause -> Play button to pause currently playing song.\r\n            $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\r\n            currentlyPlayingSong = null;\r\n        }\r\n    }\r\n\r\n    $row.find('.song-number').click(clickHandler);\r\n    $row.hover(onHover, offHover);\r\n    return $row;\r\n};\r\n\r\nvar changeAlbumView = function(album) {\r\n    // insert code here\r\n    // Update the album title\r\n    var $albumTitle = $('.album-title');\r\n    $albumTitle.text(album.name);\r\n\r\n    // Update the album artist\r\n    var $albumArtist = $('.album-artist');\r\n    $albumArtist.text(album.artist);\r\n\r\n    // Update the meta information\r\n    var $albumMeta = $('.album-meta-info');\r\n    $albumMeta.text(album.year + \" on \" + album.label);\r\n\r\n    // Update the album image\r\n    var $albumImage = $('.album-image img');\r\n    $albumImage.attr('src', album.albumArtUrl);\r\n\r\n    // Update the song list\r\n    var $songList = $('.album-song-listing');\r\n    $songList.empty();\r\n    var songs = album.songs;\r\n    for (var i = 0; i < songs.length; i++) {\r\n        var songData = songs[i];\r\n        var $newRow = createSongRow(i + 1, songData.name, songData.length);\r\n        $songList.append($newRow);\r\n    }\r\n};\r\n\r\nvar updateSeekPercentage = function($seekBar, event) {\r\n    var barWidth = $seekBar.width();\r\n    //var offsetX; // get mouse x offset here\r\n    var offsetX = event.pageX - $seekBar.offset().left;\r\n\r\n    var offsetXPercent = (offsetX  / $seekBar.width()) * 100;\r\n    offsetXPercent = Math.max(0, offsetXPercent);\r\n    offsetXPercent = Math.min(100, offsetXPercent);\r\n\r\n    var percentageString = offsetXPercent + '%';\r\n    $seekBar.find('.fill').width(percentageString);\r\n    $seekBar.find('.thumb').css({left: percentageString});\r\n};\r\n\r\nvar setupSeekBars = function() {\r\n\r\n  $seekBars = $('.player-bar .seek-bar');\r\n  $seekBars.click(function(event) {\r\n      updateSeekPercentage($(this), event);\r\n  });\r\n\r\n  $seekBars.find('.thumb').mousedown(function(event) {\r\n      var $seekBar = $(this).parent();\r\n\r\n      $seekBar.addClass('no-animate');\r\n\r\n      $(document).bind('mousemove.thumb', function(event) {\r\n          updateSeekPercentage($seekBar, event);\r\n      });\r\n\r\n      //cleanup\r\n      $(document).bind('mouseup.thumb', function() {\r\n          $seekBar.removeClass('no-animate');\r\n\r\n          $(document).unbind('mousemove.thumb');\r\n          $(document).unbind('mouseup.thumb');\r\n      });\r\n  });\r\n\r\n};\r\n\r\n// This 'if' condition is used to prevent the jQuery modifications\r\n// from happening on non-album view pages.\r\n// - Use a regex to validate that the url has \"/album\" in its path.\r\nif (document.URL.match(/\\/album.html/)) {\r\n    // Wait until the html is fully processed.\r\n    $(document).ready(function() {\r\n        changeAlbumView(albumMarconi);\r\n        setupSeekBars();\r\n    });\r\n}","//require(\"./landing\");\r\n//require(\"./collection\");\r\n//require(\"./album\");\r\n//require(\"./profile\");\r\n\r\nvar albumPicasso = {\r\n    name: 'The Colors',\r\n    artist: 'Pablo Picasso',\r\n    label: 'Cubism',\r\n    year: '1881',\r\n    albumArtUrl: '/images/album-placeholder.png',\r\n    songs: [\r\n        { name: 'Blue', length: 163.38, audioUrl: '/music/placeholders/blue' },\r\n        { name: 'Green', length: 105.66, audioUrl: '/music/placeholders/green' },\r\n        { name: 'Red', length: 270.14, audioUrl: '/music/placeholders/red' },\r\n        { name: 'Pink', length: 154.81, audioUrl: '/music/placeholders/pink' },\r\n        { name: 'Magenta', length: 375.92, audioUrl: '/music/placeholders/magenta' }\r\n    ]\r\n};\r\n\r\nfunction shuffle(o) {\r\n    for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\r\n    return o;\r\n};\r\n\r\nblocJams = angular.module('BlocJams', ['ui.router']);\r\n\r\nblocJams.config(['$stateProvider', '$locationProvider', function($stateProvider, $locationProvider) {\r\n    $locationProvider.html5Mode(true);\r\n\r\n    $stateProvider\r\n        .state('landing', {\r\n            url: '/',\r\n            controller: 'Landing.controller',\r\n            templateUrl: '/templates/landing.html'\r\n        })\r\n\r\n        .state('song', {\r\n            url: '/song',\r\n            templateUrl: '/templates/song.html'\r\n        })\r\n\r\n        .state('collection', {\r\n            url: '/collection',\r\n            controller: 'Collection.controller',\r\n            templateUrl: '/templates/collection.html'\r\n        })\r\n\r\n        .state('album', {\r\n            url: '/album',\r\n            controller: 'Album.controller',\r\n            templateUrl: '/templates/album.html'\r\n        })\r\n}]);\r\n\r\n// This is a cleaner way to call the controller than crowding it on the module definition.\r\nblocJams.controller('Landing.controller', ['$scope', function($scope) {\r\n    $scope.headingText = \"Bloc Jams\";\r\n    $scope.headingTextClicked = function () {\r\n        shuffle($scope.albumURLs);\r\n    };\r\n\r\n    $scope.subText = \"Get Down, Get Funky!\";\r\n    $scope.subTextClicked = function() {\r\n        $scope.subText += '!';\r\n    };\r\n\r\n    $scope.albumURLs = [\r\n        '/images/album-placeholders/album-1.jpg',\r\n        '/images/album-placeholders/album-2.jpg',\r\n        '/images/album-placeholders/album-3.jpg',\r\n        '/images/album-placeholders/album-4.jpg',\r\n        '/images/album-placeholders/album-5.jpg',\r\n        '/images/album-placeholders/album-6.jpg',\r\n        '/images/album-placeholders/album-7.jpg',\r\n        '/images/album-placeholders/album-8.jpg',\r\n        '/images/album-placeholders/album-9.jpg'\r\n    ];\r\n\r\n    $scope.backAlbumName = albumPicasso.name;\r\n    $scope.backAlbumArtist = albumPicasso.artist;\r\n}]);\r\n\r\nblocJams.controller('Collection.controller', ['$scope', 'SongPlayer', function($scope, SongPlayer) {\r\n    $scope.albums = [];\r\n    for (var i = 0; i < 33; i++) {\r\n        $scope.albums.push(angular.copy(albumPicasso));\r\n    }\r\n    $scope.playAlbum = function(album) {\r\n        SongPlayer.setSong(album, album.songs[0]); // Targets first song in the array\r\n    }\r\n}]);\r\n\r\nblocJams.controller('Album.controller', ['$scope', 'SongPlayer', 'ConsoleLogger', function($scope, SongPlayer, ConsoleLogger) {\r\n    $scope.album = angular.copy(albumPicasso);\r\n\r\n    var hoveredSong = null;\r\n    var playingSong = null;\r\n\r\n    $scope.onHoverSong = function(song) {\r\n        hoveredSong = song;\r\n    };\r\n\r\n    $scope.offHoverSong = function(song) {\r\n        hoveredSong = null;\r\n    };\r\n\r\n    $scope.getSongState = function(song) {\r\n        if (song === SongPlayer.currentSong && SongPlayer.playing) {\r\n            return 'playing';\r\n        }\r\n        else if (song === hoveredSong){\r\n            return 'hovered';\r\n        }\r\n        else {\r\n            return 'default';\r\n        }\r\n    };\r\n\r\n    $scope.playSong = function(song) {\r\n        SongPlayer.setSong($scope.album, song);\r\n        SongPlayer.play();\r\n    };\r\n\r\n    $scope.pauseSong = function(song) {\r\n        SongPlayer.pause();\r\n        ConsoleLogger.log();\r\n    };\r\n\r\n\r\n}]);\r\n\r\nblocJams.controller('PlayerBar.controller', ['$scope', 'SongPlayer', function($scope, SongPlayer) {\r\n    $scope.songPlayer = SongPlayer;\r\n\r\n    $scope.volumeClass = function() {\r\n        return {\r\n            'fa-volume-off': SongPlayer.volume === 0,\r\n            'fa-volume-down': SongPlayer.volume <= 70 && SongPlayer.volume > 0,\r\n            'fa-volume-up': SongPlayer.volume > 70\r\n        }\r\n    };\r\n\r\n//    $scope.volumeMute = function() {\r\n//        return {\r\n//            'fa-volume-off': SongPlayer.volume === 0,\r\n//            SongPlayer.volume = 0\r\n//        }\r\n//    };\r\n\r\n    SongPlayer.onTimeUpdate(function(event, time) {\r\n        $scope.$apply(function() {\r\n            $scope.playTime = time;\r\n        });\r\n    });\r\n}]);\r\n\r\nblocJams.service('SongPlayer', ['$rootScope', function($rootScope) {\r\n    var currentSoundFile = null;\r\n    var trackIndex = function(album, song) {\r\n        return album.songs.indexOf(song);\r\n    };\r\n\r\n    return {\r\n       currentSong: null,\r\n       currentAlbum: null,\r\n       playing: false,\r\n       volume: 90,\r\n       atEnd: false,\r\n\r\n       play: function() {\r\n           this.playing = true;\r\n           currentSoundFile.play();\r\n       },\r\n       pause: function() {\r\n           this.playing = false;\r\n           currentSoundFile.pause();\r\n       },\r\n       mute: function() {\r\n           this.volume = 0;\r\n       },\r\n//       stop: function() {\r\n//           this.playing = false;\r\n//           currentSoundFile.stop();\r\n//       },\r\n       next: function() {\r\n           var currentTrackIndex = trackIndex(this.currentAlbum, this.currentSong);\r\n           this.atEnd = currentTrackIndex >= this.currentAlbum.songs.length;\r\n           if (this.atEnd) {\r\n               currentTrackIndex--;\r\n               this.playing = false;\r\n               this.currentSong = null;\r\n               return;\r\n           }\r\n           currentTrackIndex++;\r\n           var song = this.currentAlbum.songs[currentTrackIndex];\r\n           this.setSong(this.currentAlbum, song);\r\n       },\r\n       previous: function() {\r\n           var currentTrackIndex = trackIndex(this.currentAlbum, this.currentSong);\r\n           this.atEnd = currentTrackIndex <= this.currentAlbum.songs.length - 1;\r\n           if (this.atEnd) {\r\n               //currentTrackIndex = this.currentAlbum.songs.length - 1;\r\n               this.playing = false;\r\n               this.currentSong = null;\r\n               return;\r\n           }\r\n           currentTrackIndex++;\r\n           var song = this.currentAlbum.songs[currentTrackIndex];\r\n           this.setSong(this.currentAlbum, song);\r\n       },\r\n       seek: function(time) {\r\n         // Checks to make sure that a sound file is playing before seeking.\r\n           if(currentSoundFile) {\r\n               // Uses a Buzz method to set the time of the song.\r\n               currentSoundFile.setTime(time);\r\n           }\r\n       },\r\n       onTimeUpdate: function(callback) {\r\n           return $rootScope.$on('sound:timeupdate', callback);\r\n       },\r\n       setVolume: function(volume) {\r\n           if (currentSoundFile) {\r\n               currentSoundFile.setVolume(volume);\r\n           }\r\n           this.volume = volume;\r\n       },\r\n       setSong: function(album, song) {\r\n           if (currentSoundFile) {\r\n               currentSoundFile.stop();\r\n           }\r\n           this.currentAlbum = album;\r\n           this.currentSong = song;\r\n\r\n           currentSoundFile = new buzz.sound(song.audioUrl, {\r\n               formats: [ \"mp3\" ],\r\n               preload: true\r\n           });\r\n\r\n           currentSoundFile.setVolume(this.volume);\r\n\r\n           currentSoundFile.bind('timeupdate', function(e) {\r\n               $rootScope.$broadcast('sound:timeupdate', this.getTime());\r\n           });\r\n\r\n           this.play();\r\n       }\r\n   };\r\n}]);\r\n\r\n\r\nblocJams.service('ConsoleLogger', function() {\r\n    return {\r\n        log: function() {\r\n            console.log(\"Hello World!\");\r\n        }\r\n    };\r\n});\r\n\r\nblocJams.directive('slider', ['$document', function() {\r\n\r\n    // Returns a number between 0 and 1 to determine where the mouse event happened along the slider bar.\r\n    var calculateSliderPercentFromMouseEvent = function($slider, event) {\r\n        var offsetX = event.pageX - $slider.offset().left; // distance from left\r\n        var sliderWidth = $slider.width(); // width of slider\r\n        var offsetXPercent = (offsetX / sliderWidth);\r\n        offsetXPercent = Math.max(0, offsetXPercent);\r\n        offsetXPercent = Math.min(1, offsetXPercent);\r\n        return offsetXPercent;\r\n    };\r\n\r\n    // determines if value is a number, string or undefined\r\n    var numberFromValue = function(value, defaultValue) {\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n\r\n        if (typeof value === 'undefined') {\r\n            return defaultValue;\r\n        }\r\n\r\n        if (typeof value === 'string') {\r\n            return Number(value);\r\n        }\r\n    };\r\n\r\n    return {\r\n        templateUrl: '/templates/slider.html',\r\n        replace: true,\r\n        restrict: 'E',\r\n        scope: {\r\n            onChange: '&'\r\n        },\r\n        link: function(scope, element, attributes) {\r\n            // These values represent the progress into the song/volume bar, and its max value\r\n            // For now, we're supplying arbitrary initial max values\r\n            scope.value = 0;\r\n            scope.max = 100;\r\n            var $seekBar = $(element);\r\n\r\n            attributes.$observe('value', function(newValue) {\r\n                scope.value = numberFromValue(newValue, 0);\r\n            });\r\n\r\n            attributes.$observe('max', function(newValue) {\r\n                scope.max = numberFromValue(newValue, 100) || 100;\r\n            });\r\n\r\n\r\n            var percentString = function() {\r\n                var value = scope.value || 0;\r\n                var max = scope.max || 100;\r\n                percent = value / max * 100;\r\n                return percent + \"%\";\r\n            };\r\n\r\n            scope.fillStyle = function() {\r\n                return {width: percentString()};\r\n            };\r\n\r\n            scope.thumbStyle = function() {\r\n                return {left: percentString()};\r\n            };\r\n\r\n            scope.onClickSlider = function(event) {\r\n                var percent = calculateSliderPercentFromMouseEvent($seekBar, event);\r\n                scope.value = percent * scope.max;\r\n                notifyCallBack(scope.value);\r\n            };\r\n\r\n            scope.trackThumb = function() {\r\n                $document.bind('mousemove.thumb', function(event) {\r\n                    var percent = calculateSliderPercentFromMouseEvent($seekBar, event);\r\n                    scope.$apply(function() {\r\n                        scope.value = percent * scope.max;\r\n                        notifyCallBack(scope.value);\r\n                    });\r\n                });\r\n\r\n                //cleanup\r\n                $document.bind('mouseup.thumb', function() {\r\n                    $document.unbind('mousemove.thumb');\r\n                    $document.unbind('mouseup.thumb');\r\n                });\r\n            };\r\n\r\n            var notifyCallBack = function(newValue) {\r\n                if (typeof scope.onChange === 'function') {\r\n                    scope.onChange({value: newValue});\r\n                }\r\n            };\r\n\r\n        }\r\n    };\r\n}]);\r\n\r\nblocJams.filter('timecode', function() {\r\n    return function(seconds) {\r\n        seconds = Number.parseFloat(seconds);\r\n\r\n        //Returned when no time is provided\r\n        if (Number.isNaN(seconds)) {\r\n            return '-:--';\r\n        }\r\n\r\n        //Make it a whole number\r\n        var wholeSeconds = Math.floor(seconds);\r\n        var minutes = Math.floor(wholeSeconds / 60);\r\n        var remainingSeconds = wholeSeconds % 60;\r\n        var output = minutes + ':';\r\n\r\n        //Zero pad seconds, so 9 seconds should be :09\r\n        if (remainingSeconds < 10) {\r\n            output += '0';\r\n        }\r\n        output += remainingSeconds;\r\n\r\n        return output;\r\n    }\r\n});\r\n\r\n","\r\nvar buildAlbumThumbnail = function() {\r\n    var template =\r\n        '<div class=\"collection-album-container col-md-2\">'\r\n    +   '  <div class=\"collection-album-image-container\">'\r\n    +   '    <img src=\"/images/album-placeholder.png\"/>'\r\n    +   '  </div>'\r\n    +   '   <div class=\"caption album-collection-info\">'\r\n    +   '       <p>'\r\n    +   '           <a class=\"album-name\" href=\"/album.html\"> Album Name </a>'\r\n    +   '           <br/>'\r\n    +   '           <a href=\"/album.html\"> Artist Name </a>'\r\n    +   '           <br/>'\r\n    +   '           X songs'\r\n    +   '           <br/>'\r\n    +   '       </p>'\r\n    +   '   </div>'\r\n    +   '</div>'\r\n\r\n    return $(template);\r\n};\r\n\r\nvar buildAlbumOverlay = function(albumURL) {\r\n    var template =\r\n        '<div class=\"collection-album-image-overlay\">'\r\n    +   '   <div class=\"collection-overlay-content\">'\r\n    +   '       <a class=\"collection-overlay-button\" href=\"' + albumURL + '\">'\r\n    +   '           <i class=\"fa fa-play\"></i>'\r\n    +   '       </a>'\r\n    +   '       &nbsp;'\r\n    +   '       <a class=\"collection-overlay-button\">'\r\n    +   '           <i class=\"fa fa-plus\"></i>'\r\n    +   '       </a>'\r\n    +   '   </div>'\r\n    +   '</div>'\r\n    ;\r\n    return $(template);\r\n};\r\n\r\nvar updateCollectionView = function() {\r\n    var $collection = $(\".collection-container .row\");\r\n    $collection.empty();\r\n\r\n    for (var i = 0; i < 33; i++) {\r\n        var $newThumbnail = buildAlbumThumbnail();\r\n        $collection.append($newThumbnail);\r\n    }\r\n\r\n    var onHover = function(event) {\r\n        $(this).append(buildAlbumOverlay(\"/album.html\"));\r\n    };\r\n\r\n    var offHover = function(event) {\r\n        $(this).find('.collection-album-image-overlay').remove();\r\n    };\r\n\r\n    $collection.find('.collection-album-image-container').hover(onHover, offHover);\r\n};\r\n\r\n\r\nif (document.URL.match(/\\/collection.html/)) {\r\n    //Wait until the HTML is fully processed.\r\n    $(document).ready(function() {\r\n        updateCollectionView();\r\n    });\r\n};","$(document).ready(function() {\r\n    $('.hero-content h3').click(function() {\r\n        subText = $(this).text();\r\n        $(this).text(subText + \"!\");\r\n    });\r\n    // Original Code\r\n//    $('.selling-points .point').hover(function () {\r\n//        console.log('Hover action triggered.');\r\n//        $(this).animate({'margin-top': '10px'});\r\n//    });\r\n\r\n    var onHoverAction = function(event) {\r\n        console.log('Hover action triggered.');\r\n        $(this).animate({'margin-top': '10px'});\r\n    };\r\n\r\n    var offHoverAction = function(event) {\r\n        console.log('Off-hover action triggered.');\r\n        $(this).animate({'margin-top': '0px'});\r\n    };\r\n\r\n    $('.selling-points .point').hover(onHoverAction, offHoverAction);\r\n});\r\n","\r\n// holds the name of our tab button container for selection later in the function\r\nvar tabsContainer = \".user-profile-tabs-container\";\r\nvar selectTabHandler = function(event) {\r\n    $tab = $(this);\r\n    $(tabsContainer + \" li\").removeClass('active');\r\n    $tab.parent().addClass('active');\r\n    selectedTabName = $tab.attr('href');\r\n    console.log(selectedTabName);\r\n    $(\".tab-pane\").addClass('hidden');\r\n    $(selectedTabName).removeClass('hidden');\r\n    event.preventDefault();\r\n};\r\n\r\nif (document.URL.match(/\\/profile.html/)) {\r\n    $(document).ready(function () {\r\n        var $tabs = $(tabsContainer + \" a\");\r\n        $tabs.hover(selectTabHandler);\r\n        $tabs[0].hover();\r\n    });\r\n}"]}